y = "Densité") +
theme_minimal()
library(ggplot2)
data_comparative <- data.frame(
Response = data_marketing$AcceptedCmpOverall,  # Remplacez par votre variable de réponse
Residuals = resid(modele_lm)
)
ggplot(data_comparative, aes(x = Residuals, fill = factor(Response))) +
geom_density(alpha = 0.5) +
labs(title = "Comparaison des Distributions - Réponse Positive/Négative",
x = "Résidus du Modèle",
y = "Densité") +
theme_minimal()
# Exemple d'un histogramme
hist(votre_data$variable_factorielle)
# Exemple d'un histogramme
hist(modele_lm$variable_factorielle)
table(votre_data$variable_factorielle)
table(modele_lm$variable_factorielle)
# Afficher les niveaux de la variable Response
print(levels(data_marketing$Response))
knitr::opts_chunk$set(echo = TRUE)
# Afficher les niveaux de la variable Response
print(levels(data_marketing$Response))
ggplot(people_key_value_disc, aes(value)) +
geom_histogram(stat = 'count', fill = 'dodgerblue4') +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Bar Plots of Discrete People Variables") +
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
ggplot(people_key_value_disc, aes(value)) +
geom_histogram(stat = 'count', fill = 'dodgerblue4') +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Bar Plots of Discrete People Variables") +
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
ggplot(place_key_value, aes(value)) +
geom_histogram(fill = 'dodgerblue4', binwidth = 1) +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Histograms of Place Variables") +
theme(plot.title = element_text(hjust = 0.5))
print(levels(data_marketing$Response))
print(levels(data_marketing$Response))
head(data_marketing$Response)
# Assurez-vous que la variable Response est un facteur avec deux niveaux
data_marketing$Response <- as.factor(data_marketing$Response)
library(ggplot2)
data_comparative <- data.frame(
Response = data_marketing$AcceptedCmpOverall,
Residuals = resid(modele_lm)
)
ggplot(data_comparative, aes(x = Residuals, fill = factor(Response))) +
geom_density(alpha = 0.5) +
labs(title = "Comparaison des Distributions - Réponse Positive/Négative",
x = "Résidus du Modèle",
y = "Densité") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
# Importation du fichier CSV
ifood_df <- read.csv("C:/Users/belli/OneDrive/Bureau/Self learning/Data/Kaggle/Marketing Analytics/ifood_df.csv")
data_marketing <- ifood_df
head(data_marketing)
nombre_de_variables <- ncol(data_marketing)
nombre_d_observations <- nrow(data_marketing)
cat("Nous avons un nombre de variables de :", nombre_de_variables, "\n")
cat("Nous avons un nombre d'observations de :", nombre_d_observations, "\n")
nombre_valeurs_manquantes <- sum(is.na(data_marketing))
cat("Le nombre total de valeurs manquantes est :", nombre_valeurs_manquantes, "\n")
summary(data_marketing)
#Création d'un modèle avec le nombre d'acceptation total de campagne en tant que variable expliquée.
library(leaps)
Modèle1 <- regsubsets(
AcceptedCmpOverall~Income + Kidhome + Teenhome + Recency + MntWines + MntFruits
+ MntMeatProducts + MntSweetProducts + MntGoldProds + NumDealsPurchases +
NumCatalogPurchases + NumStorePurchases + NumWebVisitsMonth + AcceptedCmp3
+ AcceptedCmp4 + AcceptedCmp5 + AcceptedCmp1 + AcceptedCmp2 + Complain +
Z_CostContact + Z_Revenue + Response + Age + Customer_Days + marital_Divorced
+ marital_Married + marital_Single + marital_Together + marital_Widow +
education_2n.Cycle + education_Basic + education_Graduation + education_Master
+ education_PhD + MntTotal + MntRegularProds, data = data_marketing,
nvmax = ncol(data_marketing), method = "exhaustive", really.big = TRUE
)
cor(data_marketing)
# Nous utilisons la méthode de régularisation ridge pour aider à traiter les dépendances linéaires.
library(glmnet)
# Création de la matrice de conception X et du vecteur de réponse y
X <- model.matrix(AcceptedCmpOverall~Income + Kidhome + Teenhome + Recency +
MntWines + MntFruits + MntMeatProducts + MntSweetProducts +
MntGoldProds + NumDealsPurchases + NumCatalogPurchases +
NumStorePurchases + NumWebVisitsMonth + Complain + Response
+ Age + Customer_Days + marital_Divorced + marital_Married +
marital_Single + marital_Together + marital_Widow +
education_2n.Cycle + education_Basic + education_Graduation +
education_Master + education_PhD, data = data_marketing)[,-1]
y <- data_marketing$AcceptedCmpOverall
# Ajustement du modèle ridge
ridge_model <- cv.glmnet(X, y, alpha = 0)  # alpha = 0 pour la régression ridge
# Obtention du meilleur modèle
meilleur_model <- glmnet(X, y, alpha = 0, lambda = ridge_model$lambda.min)
# Affichage des coefficients
coef(meilleur_model)
# Création de modèle linéaire
modele_lm <- lm(AcceptedCmpOverall~Income + Kidhome + Teenhome + Recency +
MntWines + MntFruits + MntMeatProducts + MntSweetProducts +
MntGoldProds + NumDealsPurchases + NumCatalogPurchases +
NumStorePurchases + NumWebVisitsMonth + Complain + Response +
Age + Customer_Days + marital_Divorced + marital_Married +
marital_Single + marital_Together + marital_Widow + education_2n.Cycle
+ education_Basic + education_Graduation + education_Master
+ education_PhD, data = data_marketing)
summary(modele_lm)
shapiro.test(data_marketing$AcceptedCmpOverall)
library(lmtest)
bptest(modele_lm)
library(car)
durbinWatsonTest(modele_lm)
# Assurez-vous que la variable Response est un facteur avec deux niveaux
data_marketing$Response <- as.factor(data_marketing$Response)
library(ggplot2)
data_comparative <- data.frame(
Response = data_marketing$AcceptedCmpOverall,
Residuals = resid(modele_lm)
)
ggplot(data_comparative, aes(x = Residuals, fill = factor(Response))) +
geom_density(alpha = 0.5) +
labs(title = "Comparaison des Distributions - Réponse Positive/Négative",
x = "Résidus du Modèle",
y = "Densité") +
theme_minimal()
print(levels(data_marketing$Response))
# Renommer les niveaux de la variable Response
levels(data_marketing$Response) <- c("Non accepté", "Accepté")
print(levels(data_marketing$Response))
library(ggplot2)
data_comparative <- data.frame(
Response = data_marketing$AcceptedCmpOverall,
Residuals = resid(modele_lm)
)
ggplot(data_comparative, aes(x = Residuals, fill = factor(Response))) +
geom_density(alpha = 0.5) +
labs(title = "Comparaison des Distributions - Réponse Positive/Négative",
x = "Résidus du Modèle",
y = "Densité") +
theme_minimal()
library(ggplot2)
data_comparative <- data.frame(
Response = data_marketing$Response,
Residuals = resid(modele_lm)
)
ggplot(data_comparative, aes(x = Residuals, fill = factor(Response))) +
geom_density(alpha = 0.5) +
labs(title = "Comparaison des Distributions - Réponse Positive/Négative",
x = "Résidus du Modèle",
y = "Densité") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Exemple : Diagramme en barres des réponses acceptées et non acceptées
ggplot(data_marketing, aes(x = Response)) +
geom_bar(fill = "blue") +
labs(title = "Distribution des Réponses",
x = "Réponse",
y = "Fréquence") +
theme_minimal()
# Renommer les niveaux de la variable Response
data_marketing$Response <- as.factor(data_marketing$Response)
levels(data_marketing$Response) <- c("Non accepté", "Accepté")
print(levels(data_marketing$Response))
```
# Renommer les niveaux de la variable Response
data_marketing$Response <- as.factor(data_marketing$Response)
levels(data_marketing$Response) <- c("Non accepté", "Accepté")
```{r}
library(ggplot2)
# Diagramme en barres des réponses acceptées et non acceptées
ggplot(data_marketing, aes(x = Response)) +
geom_bar(fill = "grey") +
labs(title = "Distribution des Réponses",
x = "Réponse",
y = "Fréquence") +
theme_minimal()
# Renommer les niveaux de la variable Response
data_marketing$AcceptedCmpOverall <- as.factor(data_marketing$AcceptedCmpOverall)
levels(data_marketing$AcceptedCmpOverall) <- c("Non accepté", "Accepté")
library(ggplot2)
# Diagramme en barres des réponses acceptées et non acceptées
ggplot(data_marketing, aes(x = AcceptedCmpOverall)) +
geom_bar(fill = "grey") +
labs(title = "Distribution des Réponses",
x = "Réponse",
y = "Fréquence") +
theme_minimal()
library(ggplot2)
# Diagramme en barres des réponses acceptées et non acceptées
ggplot(data_marketing, aes(x = AcceptedCmpOverall)) +
geom_bar(fill = "grey") +
labs(title = "Distribution des Réponses",
x = "Nombre de réponse positive envers les campagnes publicitaires",
y = "Fréquence") +
theme_minimal()
b+geom_point(aes(shape=cyl))
ggplot(modele_lm, aes(x=AcceptedCmpOverall))+geom_point(aes(y=education_graduation),color="blue")
ggplot(modele_lm, aes(x=AcceptedCmpOverall))+geom_point(aes(y=education_Graduation),color="blue")
bloxplot(d$AcceptedCmpOverall~d$education_Graduation)
knitr::opts_chunk$set(echo = TRUE)
absent.rda<-read.table(file.choose(), sep=";", dec=".",header=TRUE)
absent.rda
names(absent.rda)<-c("Moyenne", "Qualite", "Jour_abs")
str(absent.rda)
absent.rda$Qualite #Nous donne la variable Qualite
as.factor(absent.rda$Qualite) #Transforme cette variable en variable qualitatives à plusieurs facteurs (modalités)
absent.rda$Qualite<-as.factor(absent.rda$Qualite) #On remplace notre anciennce variable par cette nouvelle variable
boxplot(absent.rda)
install.packages("EnvStats")
library(EnvStats)
rosnerTest(absent.rda$Jour_abs,k=2) #Les résultats qui nous intéressent sont dans la partie $all.stats.
ggplot(modele_lm,aes(x=AcceptedCmpOverall,y=NumCatalogPurchases))+geom_boxplot()+labs(x="AcceptedCmpOverall",yy="NumCatalogPurchases")+ggtitle("Boxplot")
# Créer un nuage de points avec une ligne de régression linéaire
ggplot(data, aes(x = AcceptedCmpOverall, y = NumWebVisitsMonth)) +
geom_point() +  # Nuage de points
geom_smooth(method = "lm", se = FALSE) +  # Ligne de régression linéaire sans intervalle de confiance
labs(x = "AcceptedCmpOverall", y = "NumWebVisitsMonth") +
ggtitle("Nuage de points avec régression linéaire")
# Créer un nuage de points avec une ligne de régression linéaire
ggplot(modele_lm, aes(x = AcceptedCmpOverall, y = NumWebVisitsMonth)) +
geom_point() +  # Nuage de points
geom_smooth(method = "lm", se = FALSE) +  # Ligne de régression linéaire sans intervalle de confiance
labs(x = "AcceptedCmpOverall", y = "NumWebVisitsMonth") +
ggtitle("Nuage de points avec régression linéaire")
# Créer un nuage de points avec une ligne de régression linéaire
ggplot(data_marketing, aes(x = AcceptedCmpOverall, y = NumWebVisitsMonth)) +
geom_point() +  # Nuage de points
geom_smooth(method = "lm", se = FALSE) +  # Ligne de régression linéaire sans intervalle de confiance
labs(x = "AcceptedCmpOverall", y = "NumWebVisitsMonth") +
ggtitle("Nuage de points avec régression linéaire")
# Créer un nuage de points avec une ligne de régression linéaire
ggplot(data_marketing, aes(x = NumWebVisitsMonth , y = AcceptedCmpOverall)) +
geom_point() +  # Nuage de points
geom_smooth(method = "lm", se = FALSE) +  # Ligne de régression linéaire sans intervalle de confiance
labs(x = "NumWebVisitsMonth", y = "AcceptedCmpOverall") +
ggtitle("Nuage de points avec régression linéaire")
# Créer un nuage de points avec une ligne de régression linéaire
ggplot(modele_lm, aes(x = NumWebVisitsMonth , y = AcceptedCmpOverall)) +
geom_point() +  # Nuage de points
geom_smooth(method = "lm", se = FALSE) +  # Ligne de régression linéaire sans intervalle de confiance
labs(x = "NumWebVisitsMonth", y = "AcceptedCmpOverall") +
ggtitle("Nuage de points avec régression linéaire")
# Créer un nuage de points avec une ligne de régression linéaire
ggplot(modele_lm, aes(x = NumWebVisitsMonth , y = AcceptedCmpOverall)) +
geom_point() +  # Nuage de points
labs(x = "NumWebVisitsMonth", y = "AcceptedCmpOverall") +
ggtitle("Nuage de points avec régression linéaire")
# Créer un nuage de points avec une ligne de régression linéaire
ggplot(modele_lm, aes(x = NumWebVisitsMonth , y = AcceptedCmpOverall)) +
geom_point() +  # Nuage de points
geom_smooth(method = "lm", se = FALSE) +  # Ligne de régression linéaire sans intervalle de confiance
labs(x = "NumWebVisitsMonth", y = "AcceptedCmpOverall") +
ggtitle("Nuage de points avec régression linéaire")
# Créer un nuage de points pour visualiser la corrélation entre AcceptedCmpOverall et NumWebVisitsMonth
ggplot(data, aes(x = AcceptedCmpOverall, y = NumWebVisitsMonth)) +
geom_point() +  # Nuage de points
labs(x = "AcceptedCmpOverall", y = "NumWebVisitsMonth") +
ggtitle("Nuage de points : Corrélation entre AcceptedCmpOverall et NumWebVisitsMonth")
# Créer un nuage de points pour visualiser la corrélation entre AcceptedCmpOverall et NumWebVisitsMonth
ggplot(modele_lm, aes(x = AcceptedCmpOverall, y = NumWebVisitsMonth)) +
geom_point() +  # Nuage de points
labs(x = "AcceptedCmpOverall", y = "NumWebVisitsMonth") +
ggtitle("Nuage de points : Corrélation entre AcceptedCmpOverall et NumWebVisitsMonth")
lieu<-modele_lm %>%
select(c('NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth'))
library(dplyr)
lieu<-modele_lm %>%
select(c('NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth'))
library(dplyr)
lieu<-data_marketing %>%
select(c('NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth'))
produit<-data_marketing %>%
select(c('MntWines','MntFruits','MntMeatProducts','MntFishProducts','MontSeetProducts','MntGoldProds'))
library(dplyr)
lieu<-data_marketing %>%
select(c('NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth'))
produit<-data_marketing %>%
select(c('MntWines','MntFruits','MntMeatProducts','MntFishProducts','MntSweetProducts','MntGoldProds'))
# plot boxplots for place variables
ggplot(place_key_value, aes(value)) +
geom_histogram(fill = 'dodgerblue4', binwidth = 1) +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Histograms of Place Variables") +
theme(plot.title = element_text(hjust = 0.5))
# plot boxplots for place variables
ggplot(lieu, aes(value)) +
geom_histogram(fill = 'dodgerblue4', binwidth = 1) +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Histograms of Place Variables") +
theme(plot.title = element_text(hjust = 0.5))
library(dplyr)
lieu<-data_marketing %>%
select(c('NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth'))
lieu_key_value<-lieu
produit<-data_marketing %>%
select(c('MntWines','MntFruits','MntMeatProducts','MntFishProducts','MntSweetProducts','MntGoldProds'))
# plot boxplots for place variables
ggplot(lieu, aes(value)) +
geom_histogram(fill = 'dodgerblue4', binwidth = 1) +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Histograms of Place Variables") +
theme(plot.title = element_text(hjust = 0.5))
library(dplyr)
lieu<-data_marketing %>%
select(c('NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth'))
lieu_key_value<-gather(lieu)
library(dplyr)
lieu<-data_marketing %>%
select(c('NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth'))
lieu_key_value <- pivot_longer(lieu, cols = everything(), names_to = "Variable", values_to = "Value")
library(dplyr)
library(tidyr)
lieu<-data_marketing %>%
select(c('NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth'))
lieu_key_value <- pivot_longer(lieu, cols = everything(), names_to = "Variable", values_to = "Value")
produit<-data_marketing %>%
select(c('MntWines','MntFruits','MntMeatProducts','MntFishProducts','MntSweetProducts','MntGoldProds'))
# plot boxplots for place variables
ggplot(lieu, aes(value)) +
geom_histogram(fill = 'dodgerblue4', binwidth = 1) +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Histograms of Place Variables") +
theme(plot.title = element_text(hjust = 0.5))
# plot boxplots for place variables
ggplot(lieu_key_value, aes(value)) +
geom_histogram(fill = 'dodgerblue4', binwidth = 1) +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Histograms of Place Variables") +
theme(plot.title = element_text(hjust = 0.5))
library(dplyr)
library(tidyr)
lieu<-data_marketing %>%
select(c('NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth'))
lieu_key_value <- pivot_longer(lieu, cols = everything(), names_to = "key", values_to = "value")
produit<-data_marketing %>%
select(c('MntWines','MntFruits','MntMeatProducts','MntFishProducts','MntSweetProducts','MntGoldProds'))
# plot boxplots for place variables
ggplot(lieu_key_value, aes(value)) +
geom_histogram(fill = 'dodgerblue4', binwidth = 1) +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Histograms of Place Variables") +
theme(plot.title = element_text(hjust = 0.5))
# plot boxplots for place variables
ggplot(lieu_key_value, aes(value)) +
geom_histogram(fill = 'brown', binwidth = 1) +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Histograms of Place Variables") +
theme(plot.title = element_text(hjust = 0.5))
library(dplyr)
library(tidyr)
lieu<-data_marketing %>%
select(c('NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth'))
lieu_key_value <- pivot_longer(lieu, cols = everything(), names_to = "key", values_to = "value")
produit<-data_marketing %>%
select(c('MntWines','MntFruits','MntMeatProducts','MntFishProducts','MntSweetProducts','MntGoldProds'))
produit_key_value <- pivot_longer(produit, cols = everything(), names_to = "key", values_to = "value")
# plot boxplots for place variables
ggplot(produit_key_value, aes(value)) +
geom_histogram(fill = 'gold', binwidth = 1) +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Histograms of Place Variables") +
theme(plot.title = element_text(hjust = 0.5))
library(dplyr)
library(tidyr)
lieu<-data_marketing %>%
select(c('NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth'))
lieu_key_value <- pivot_longer(lieu, cols = everything(), names_to = "key", values_to = "value")
ggplot(lieu_key_value, aes(value)) +
geom_histogram(fill = 'brown', binwidth = 1) +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Histograms of Place Variables") +
theme(plot.title = element_text(hjust = 0.5))
year_birth_plot <- ggplot(marketing_data, aes(Year_Birth)) +
geom_histogram(bins = 50, fill = 'dodgerblue4') +
labs(title = "Histogram of Year_Birth") +
theme(plot.title = element_text(hjust = 0.5))
year_birth_plot <- ggplot(data_marketing, aes(Year_Birth)) +
geom_histogram(bins = 50, fill = 'dodgerblue4') +
labs(title = "Histogram of Year_Birth") +
theme(plot.title = element_text(hjust = 0.5))
year_birth_plot <- ggplot(data_marketing, aes(Year_Birth)) +
geom_histogram(bins = 50, fill = 'dodgerblue4') +
labs(title = "Histogram of Year_Birth") +
theme(plot.title = element_text(hjust = 0.5))
Age_plot <- ggplot(data_marketing, aes(age)) +
geom_histogram(bins = 50, fill = 'dodgerblue4') +
labs(title = "Histogram of Year_Birth") +
theme(plot.title = element_text(hjust = 0.5))
Age_plot <- ggplot(data_marketing, aes(Age)) +
geom_histogram(bins = 50, fill = 'dodgerblue4') +
labs(title = "Histogram of Year_Birth") +
theme(plot.title = element_text(hjust = 0.5))
knitr::opts_chunk$set(echo = TRUE)
# Importation du fichier CSV
ifood_df <- read.csv("C:/Users/belli/OneDrive/Bureau/Self learning/Data/Kaggle/Marketing Analytics/ifood_df.csv")
data_marketing <- ifood_df
head(data_marketing)
nombre_de_variables <- ncol(data_marketing)
nombre_d_observations <- nrow(data_marketing)
cat("Nous avons un nombre de variables de :", nombre_de_variables, "\n")
cat("Nous avons un nombre d'observations de :", nombre_d_observations, "\n")
nombre_valeurs_manquantes <- sum(is.na(data_marketing))
cat("Le nombre total de valeurs manquantes est :", nombre_valeurs_manquantes, "\n")
summary(data_marketing)
#Création d'un modèle avec le nombre d'acceptation total de campagne en tant que variable expliquée.
library(leaps)
Modèle1 <- regsubsets(
AcceptedCmpOverall~Income + Kidhome + Teenhome + Recency + MntWines + MntFruits
+ MntMeatProducts + MntSweetProducts + MntGoldProds + NumDealsPurchases +
NumCatalogPurchases + NumStorePurchases + NumWebVisitsMonth + AcceptedCmp3
+ AcceptedCmp4 + AcceptedCmp5 + AcceptedCmp1 + AcceptedCmp2 + Complain +
Z_CostContact + Z_Revenue + Response + Age + Customer_Days + marital_Divorced
+ marital_Married + marital_Single + marital_Together + marital_Widow +
education_2n.Cycle + education_Basic + education_Graduation + education_Master
+ education_PhD + MntTotal + MntRegularProds, data = data_marketing,
nvmax = ncol(data_marketing), method = "exhaustive", really.big = TRUE
)
cor(data_marketing)
# Nous utilisons la méthode de régularisation ridge pour aider à traiter les dépendances linéaires.
library(glmnet)
# Création de la matrice de conception X et du vecteur de réponse y
X <- model.matrix(AcceptedCmpOverall~Income + Kidhome + Teenhome + Recency +
MntWines + MntFruits + MntMeatProducts + MntSweetProducts +
MntGoldProds + NumDealsPurchases + NumCatalogPurchases +
NumStorePurchases + NumWebVisitsMonth + Complain + Response
+ Age + Customer_Days + marital_Divorced + marital_Married +
marital_Single + marital_Together + marital_Widow +
education_2n.Cycle + education_Basic + education_Graduation +
education_Master + education_PhD, data = data_marketing)[,-1]
y <- data_marketing$AcceptedCmpOverall
# Ajustement du modèle ridge
ridge_model <- cv.glmnet(X, y, alpha = 0)  # alpha = 0 pour la régression ridge
# Obtention du meilleur modèle
meilleur_model <- glmnet(X, y, alpha = 0, lambda = ridge_model$lambda.min)
# Affichage des coefficients
coef(meilleur_model)
# Création de modèle linéaire
modele_lm <- lm(AcceptedCmpOverall~Income + Kidhome + Teenhome + Recency +
MntWines + MntFruits + MntMeatProducts + MntSweetProducts +
MntGoldProds + NumDealsPurchases + NumCatalogPurchases +
NumStorePurchases + NumWebVisitsMonth + Complain + Response +
Age + Customer_Days + marital_Divorced + marital_Married +
marital_Single + marital_Together + marital_Widow + education_2n.Cycle
+ education_Basic + education_Graduation + education_Master
+ education_PhD, data = data_marketing)
summary(modele_lm)
shapiro.test(data_marketing$AcceptedCmpOverall)
library(lmtest)
bptest(modele_lm)
library(car)
durbinWatsonTest(modele_lm)
library(ggplot2)
# Diagramme en barres des réponses acceptées et non acceptées
ggplot(data_marketing, aes(x = AcceptedCmpOverall)) +
geom_bar(fill = "grey") +
labs(title = "Distribution des Réponses",
x = "Nombre de réponse positive envers les campagnes publicitaires",
y = "Fréquence") +
theme_minimal()
library(dplyr)
library(tidyr)
lieu<-data_marketing %>%
select(c('NumWebPurchases','NumCatalogPurchases','NumStorePurchases','NumWebVisitsMonth'))
lieu_key_value <- pivot_longer(lieu, cols = everything(), names_to = "key", values_to = "value")
ggplot(lieu_key_value, aes(value)) +
geom_histogram(fill = 'brown', binwidth = 1) +
facet_wrap(~key, scales = 'free_x', ncol = 2) +
labs(title = "Histograms of Place Variables") +
theme(plot.title = element_text(hjust = 0.5))
Age_plot <- ggplot(data_marketing, aes(Age)) +
geom_histogram(bins = 50, fill = 'dodgerblue4') +
labs(title = "Histogram of Year_Birth") +
theme(plot.title = element_text(hjust = 0.5))
Age_plot <- ggplot(data_marketing, aes(Age)) +
geom_histogram(bins = 50, fill = 'dodgerblue4') +
labs(title = "Histogram of Year_Birth") +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(Age_plot)
Age_plot <- ggplot(data_marketing, aes(x = Age)) +
geom_histogram(fill = 'dodgerblue4', binwidth = 5) +
labs(title = "Histogramme des âges") +
theme(plot.title = element_text(hjust = 0.5))
print(Age_plot)
library(ggplot2)
# Créer un nuage de points pour visualiser la corrélation entre l'âge et AcceptedCmpOverall
ggplot(data_marketing, aes(x = Age, y = AcceptedCmpOverall)) +
geom_point() +  # Nuage de points
labs(x = "Âge", y = "AcceptedCmpOverall") +
ggtitle("Corrélation entre l'âge et AcceptedCmpOverall")
library(ggplot2)
# Créer un nuage de points pour visualiser la corrélation entre l'âge et AcceptedCmpOverall
ggplot(data_marketing, aes(x = Age, y = AcceptedCmpOverall)) +
geom_point() +  # Nuage de points
labs(x = "Âge", y = "AcceptedCmpOverall") +
ggtitle("Corrélation entre l'âge et AcceptedCmpOverall")
library(ggplot2)
# Créer un nuage de points pour visualiser la corrélation entre l'âge et AcceptedCmpOverall
ggplot(data_marketing, aes(x = Age, y = AcceptedCmpOverall)) +
geom_point() +  # Nuage de points
labs(x = "Âge", y = "AcceptedCmpOverall") +
ggtitle("Corrélation entre l'âge et AcceptedCmpOverall")
library(ggplot2)
# Créer un nuage de points pour visualiser la corrélation entre l'âge et AcceptedCmpOverall
ggplot(modele_lm, aes(x = Age, y = AcceptedCmpOverall)) +
geom_point() +  # Nuage de points
labs(x = "Âge", y = "AcceptedCmpOverall") +
ggtitle("Corrélation entre l'âge et AcceptedCmpOverall")
